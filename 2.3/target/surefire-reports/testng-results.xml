<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="2" total="5" passed="3">
  <reporter-output>
  </reporter-output>
  <suite name="TestSuite" duration-ms="831" started-at="2019-04-26T06:29:08Z" finished-at="2019-04-26T06:29:09Z">
    <groups>
    </groups>
    <test name="alok" duration-ms="831" started-at="2019-04-26T06:29:08Z" finished-at="2019-04-26T06:29:09Z">
      <class name="test.Extent">
        <test-method status="PASS" signature="startTest()[pri:0, instance:test.Extent@3b6eb2ec]" name="startTest" is-config="true" duration-ms="332" started-at="2019-04-26T11:59:08Z" finished-at="2019-04-26T11:59:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method status="FAIL" signature="call()[pri:0, instance:test.Extent@3b6eb2ec]" name="call" duration-ms="4" started-at="2019-04-26T11:59:08Z" finished-at="2019-04-26T11:59:08Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [a] but found [an]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [a] but found [an]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertEquals(Assert.java:125)
	at org.testng.Assert.assertEquals(Assert.java:178)
	at org.testng.Assert.assertEquals(Assert.java:188)
	at test.aLOK.test1(aLOK.java:19)
	at test.Extent.call(Extent.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:39)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:393)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- call -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:test.Extent@3b6eb2ec]" name="getResult" is-config="true" duration-ms="45" started-at="2019-04-26T11:59:08Z" finished-at="2019-04-26T11:59:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=call status=FAILURE method=Extent.call()[pri:0, instance:test.Extent@3b6eb2ec] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="test123()[pri:0, instance:test.Extent@3b6eb2ec]" name="test123" duration-ms="0" started-at="2019-04-26T11:59:08Z" finished-at="2019-04-26T11:59:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test123 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:test.Extent@3b6eb2ec]" name="getResult" is-config="true" duration-ms="2" started-at="2019-04-26T11:59:08Z" finished-at="2019-04-26T11:59:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test123 status=SUCCESS method=Extent.test123()[pri:0, instance:test.Extent@3b6eb2ec] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="test1234()[pri:0, instance:test.Extent@3b6eb2ec]" name="test1234" duration-ms="1" started-at="2019-04-26T11:59:08Z" finished-at="2019-04-26T11:59:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1234 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:test.Extent@3b6eb2ec]" name="getResult" is-config="true" duration-ms="1" started-at="2019-04-26T11:59:08Z" finished-at="2019-04-26T11:59:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test1234 status=SUCCESS method=Extent.test1234()[pri:0, instance:test.Extent@3b6eb2ec] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="endTest()[pri:0, instance:test.Extent@3b6eb2ec]" name="endTest" is-config="true" duration-ms="349" started-at="2019-04-26T11:59:08Z" finished-at="2019-04-26T11:59:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTest -->
      </class> <!-- test.Extent -->
      <class name="test.aLOK">
        <test-method status="PASS" signature="test()[pri:0, instance:test.aLOK@6a5fc7f7]" name="test" duration-ms="15" started-at="2019-04-26T11:59:08Z" finished-at="2019-04-26T11:59:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="FAIL" signature="test1()[pri:0, instance:test.aLOK@6a5fc7f7]" name="test1" duration-ms="2" started-at="2019-04-26T11:59:08Z" finished-at="2019-04-26T11:59:08Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [a] but found [an]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [a] but found [an]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertEquals(Assert.java:125)
	at org.testng.Assert.assertEquals(Assert.java:178)
	at org.testng.Assert.assertEquals(Assert.java:188)
	at test.aLOK.test1(aLOK.java:19)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:39)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:393)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
      </class> <!-- test.aLOK -->
    </test> <!-- alok -->
  </suite> <!-- TestSuite -->
</testng-results>
